# -*- coding: utf-8 -*-

"""
Copyright Â© 2019-present Lenovo

This file is licensed under both the BSD-3 license for individual use and
EPL-1.0 license for commercial use. Full text of both licenses can be found in
COPYING.BSD and COPYING.EPL files.
"""
# Generated by Django 1.11.10 on 2018-09-18 08:55
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

from . import (
    CreateInfluxdbContinuousQuery, CreateInfluxdbDatabase,
    CreateInfluxdbRetentionPolicy,
)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chassis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('location_u', models.IntegerField(default=1)),
                ('machine_type', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Gpu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField()),
                ('occupation', models.BooleanField(default=False, help_text=b'True: used; False: free')),
                ('type', models.CharField(default=b'', max_length=100)),
                ('memory_used', models.IntegerField(default=0, help_text=b'Unit: MB')),
                ('memory_total', models.IntegerField(default=0, help_text=b'Unit: MB')),
                ('util', models.IntegerField(default=0, help_text=b'Unit: %')),
                ('memory_util', models.IntegerField(default=0, help_text=b'Unit: %')),
                ('temperature', models.IntegerField(default=0, help_text=b'Unit: C')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.TextField(unique=True)),
                ('type', models.TextField()),
                ('machinetype', models.TextField()),
                ('mgt_ipv4', models.TextField(validators=[django.core.validators.validate_ipv46_address])),
                ('bmc_ipv4', models.TextField(validators=[django.core.validators.validate_ipv46_address])),
                ('location_u', models.IntegerField(default=1)),
                ('service', models.TextField()),
                ('cpu_util', models.FloatField(default=0)),
                ('power_status', models.BooleanField(default=False, help_text=b'True: power on; False: power off')),
                ('disk_total', models.FloatField(default=0, help_text=b'unit:GB')),
                ('disk_used', models.FloatField(default=0, help_text=b'unit:GB')),
                ('memory_total', models.FloatField(default=0, help_text=b'unit:KB')),
                ('memory_used', models.FloatField(default=0, help_text=b'unit:KB')),
                ('network_in', models.FloatField(default=0, help_text=b'unit:Byte/s')),
                ('network_out', models.FloatField(default=0, help_text=b'unit:Byte/s')),
                ('cpu_total', models.IntegerField(default=0)),
                ('chassis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cluster.Chassis')),
            ],
        ),
        migrations.CreateModel(
            name='NodeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('nodes', models.ManyToManyField(related_name='groups', to='cluster.Node')),
            ],
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('col', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Row',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('index', models.IntegerField()),
                ('room', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cluster.Room')),
            ],
        ),
        migrations.AddField(
            model_name='rack',
            name='row',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cluster.Row'),
        ),
        migrations.AddField(
            model_name='node',
            name='rack',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cluster.Rack'),
        ),
        migrations.AddField(
            model_name='gpu',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gpu', to='cluster.Node'),
        ),
        migrations.AddField(
            model_name='chassis',
            name='rack',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cluster.Rack'),
        ),

        # influxdb
        CreateInfluxdbDatabase(),
        CreateInfluxdbRetentionPolicy(
            name='hour',
            duration='6h',
            replication='1',
            default=True
        ),
        CreateInfluxdbRetentionPolicy(
            name='ai',
            duration='INF',
            replication='1',
        ),
        CreateInfluxdbRetentionPolicy(
            name='day',
            duration='1d',
            replication='1',
        ),
        CreateInfluxdbRetentionPolicy(
            name='week',
            duration='7d',
            replication='1',
        ),
        CreateInfluxdbRetentionPolicy(
            name='month',
            duration='31d',
            replication='1',
        ),
        CreateInfluxdbContinuousQuery(
            name='day_summary',
            interval='10m',
            src_policy='hour',
            dst_policy='day',
            regex='(node|nodegroup|rack|cluster)_.+'
        ),
        CreateInfluxdbContinuousQuery(
            name='week_summary',
            interval='60m',
            src_policy='day',
            dst_policy='week',
            regex='(node|nodegroup|rack|cluster)_.+'
        ),
        CreateInfluxdbContinuousQuery(
            name='month_summary',
            interval='6h',
            src_policy='week',
            dst_policy='month',
            regex='(node|nodegroup|rack|cluster)_.+'
        ),
    ]
